import { useState, useEffect, useMemo } from 'react';
import { AppShell } from '@/components/layout/app-shell';
import { ResponsivePageLayout } from '@/components/layout/responsive-page-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useToast } from '@/hooks/use-toast';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { db } from '@/lib/supabase';
import { 
  Search, 
  BookOpen, 
  Users, 
  Calendar, 
  Plus, 
  Filter, 
  Download,
  Edit,
  Trash2,
  CheckCircle,
  Clock,
  AlertCircle,
  Star,
  TrendingUp,
  Eye,
  QrCode
} from 'lucide-react';
import { format } from 'date-fns';

// Enhanced schemas following world-class UX principles
const bookSchema = z.object({
  title: z.string().min(1, '‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®'),
  titleBn: z.string().min(1, '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®'),
  author: z.string().min(1, '‡¶≤‡ßá‡¶ñ‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®'),
  isbn: z.string().optional(),
  category: z.string().min(1, '‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'),
  publisher: z.string().optional(),
  publishYear: z.number().min(1900).max(new Date().getFullYear()),
  totalCopies: z.number().min(1, '‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶™‡¶ø ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá'),
  location: z.string().min(1, '‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®'),
  description: z.string().optional(),
});

const borrowSchema = z.object({
  studentId: z.string().min(1, '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'),
  bookId: z.string().min(1, '‡¶¨‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'),
  dueDate: z.date(),
  notes: z.string().optional(),
});

type BookFormData = z.infer<typeof bookSchema>;
type BorrowFormData = z.infer<typeof borrowSchema>;

export default function LibraryPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState('dashboard');
  const [searchQuery, setSearchQuery] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [isAddBookOpen, setIsAddBookOpen] = useState(false);
  const [isEditBookOpen, setIsEditBookOpen] = useState(false);
  const [isBorrowBookOpen, setIsBorrowBookOpen] = useState(false);
  const [selectedBook, setSelectedBook] = useState<any>(null);

  // Enhanced form handling following Luke Wroblewski's principles
  const bookForm = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      title: '',
      titleBn: '',
      author: '',
      isbn: '',
      category: '',
      publisher: '',
      publishYear: new Date().getFullYear(),
      totalCopies: 1,
      location: '',
      description: '',
    },
  });

  const borrowForm = useForm<BorrowFormData>({
    resolver: zodResolver(borrowSchema),
    defaultValues: {
      studentId: '',
      bookId: '',
      dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days from now
      notes: '',
    },
  });

  // Real-time data queries with direct Supabase calls
  const { data: books = [], isLoading: booksLoading } = useQuery({
    queryKey: ['library-books'],
    queryFn: async () => {
      console.log('üîç Fetching library books for school ID:', 1);
      try {
        const data = await db.getLibraryBooks(1); // schoolId = 1, RLS will handle filtering
        console.log('‚úÖ Library books received:', data);
        return data || [];
      } catch (error) {
        console.error('‚ùå Error fetching library books:', error);
        throw error;
      }
    },
    staleTime: 0,
    gcTime: 0,
  });

  const { data: borrowedBooks = [], isLoading: borrowedLoading } = useQuery({
    queryKey: ['library-borrowed'],
    queryFn: async () => {
      console.log('üîç Fetching borrowed books for school ID:', 1);
      try {
        const data = await db.getBorrowedBooks(1);
        console.log('‚úÖ Borrowed books received:', data);
        return data || [];
      } catch (error) {
        console.error('‚ùå Error fetching borrowed books:', error);
        throw error;
      }
    },
    staleTime: 0,
    gcTime: 0,
  });

  const { data: libraryStats = {}, isLoading: statsLoading, error: statsError } = useQuery({
    queryKey: ['library-stats'],
    queryFn: async () => {
      console.log('üîç Fetching library stats for school ID:', 1);
      try {
        const data = await db.getLibraryStats(1);
        console.log('‚úÖ Library stats received:', data);
        return data || { totalBooks: 0, borrowedBooks: 0, availableBooks: 0 };
      } catch (error) {
        console.error('‚ùå Error fetching library stats:', error);
        throw error;
      }
    },
    staleTime: 0,
    gcTime: 0,
  });

  const { data: students = [] } = useQuery({
    queryKey: ['students'],
    queryFn: async () => {
      console.log('üîç Fetching students for school ID:', 1);
      try {
        const data = await db.getStudents(1);
        console.log('‚úÖ Students received:', data);
        return data || [];
      } catch (error) {
        console.error('‚ùå Error fetching students:', error);
        throw error;
      }
    },
    staleTime: 0,
    gcTime: 0,
  });

  // Mutations for CRUD operations with direct Supabase
  const addBookMutation = useMutation({
    mutationFn: async (data: BookFormData) => {
      const bookData = {
        ...data,
        title_bn: data.titleBn,
        publish_year: data.publishYear,
        total_copies: data.totalCopies,
        available_copies: data.totalCopies,
        school_id: 1
      };
      
      return await db.createLibraryBook(bookData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['library-books'] });
      queryClient.invalidateQueries({ queryKey: ['library-stats'] });
      setIsAddBookOpen(false);
      bookForm.reset();
      toast({
        title: "‡¶∏‡¶´‡¶≤",
        description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ú‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      });
    },
    onError: (error: any) => {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶¨‡¶á ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ú‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        variant: "destructive",
      });
    },
  });

  const borrowBookMutation = useMutation({
    mutationFn: async (data: BorrowFormData) => {
      console.log('üîÑ Borrowing book via Supabase...', data);
      const result = await db.borrowBook(parseInt(data.bookId), parseInt(data.studentId), 1);
      console.log('‚úÖ Book borrowed via Supabase:', result);
      return result;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['library-borrowed'] });
      queryClient.invalidateQueries({ queryKey: ['library-books'] });
      queryClient.invalidateQueries({ queryKey: ['library-stats'] });
      setIsBorrowBookOpen(false);
      borrowForm.reset();
      toast({
        title: "‡¶∏‡¶´‡¶≤",
        description: "‡¶¨‡¶á ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      });
    },
    onError: () => {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶¨‡¶á ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        variant: "destructive",
      });
    },
  });

  const returnBookMutation = useMutation({
    mutationFn: async (borrowId: number) => {
      console.log('üîÑ Returning book via Supabase...', borrowId);
      const result = await db.returnBook(borrowId);
      console.log('‚úÖ Book returned via Supabase:', result);
      return result;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['library-borrowed'] });
      queryClient.invalidateQueries({ queryKey: ['library-books'] });
      queryClient.invalidateQueries({ queryKey: ['library-stats'] });
      toast({
        title: "‡¶∏‡¶´‡¶≤",
        description: "‡¶¨‡¶á ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      });
    },
    onError: () => {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶¨‡¶á ‡¶´‡ßá‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        variant: "destructive",
      });
    },
  });

  const deleteBookMutation = useMutation({
    mutationFn: async (bookId: number) => {
      console.log('üîÑ Deleting book via Supabase...', bookId);
      const result = await db.deleteLibraryBook(bookId);
      console.log('‚úÖ Book deleted via Supabase:', result);
      return result;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['library-books'] });
      queryClient.invalidateQueries({ queryKey: ['library-stats'] });
      toast({
        title: "‡¶∏‡¶´‡¶≤",
        description: "‡¶¨‡¶á ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      });
    },
    onError: () => {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶¨‡¶á ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        variant: "destructive",
      });
    },
  });

  const editBookMutation = useMutation({
    mutationFn: async ({ id, ...data }: any) => {
      const bookData = {
        ...data,
        title_bn: data.titleBn,
        publish_year: data.publishYear,
        total_copies: data.totalCopies,
      };
      
      return await db.updateLibraryBook(id, bookData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['library-books'] });
      queryClient.invalidateQueries({ queryKey: ['library-stats'] });
      setIsEditBookOpen(false);
      bookForm.reset();
      toast({
        title: "‡¶∏‡¶´‡¶≤",
        description: "‡¶¨‡¶á ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      });
    },
    onError: (error: any) => {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶¨‡¶á ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        variant: "destructive",
      });
    },
  });

  // Enhanced filtering following Steve Krug's usability principles
  const filteredBooks = useMemo(() => {
    return books.filter(book => {
      const matchesSearch = searchQuery === '' || 
        book.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        book.title_bn.includes(searchQuery) ||
        book.author.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesCategory = categoryFilter === 'all' || book.category === categoryFilter;
      
      return matchesSearch && matchesCategory;
    });
  }, [books, searchQuery, categoryFilter]);

  const filteredBorrowedBooks = useMemo(() => {
    return borrowedBooks.filter(borrow => {
      const matchesSearch = searchQuery === '' || 
        borrow.book?.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        borrow.student?.name.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesStatus = statusFilter === 'all' || 
        (statusFilter === 'overdue' && borrow.dueDate && new Date(borrow.dueDate) < new Date()) ||
        (statusFilter === 'active' && borrow.dueDate && new Date(borrow.dueDate) >= new Date());
      
      return matchesSearch && matchesStatus;
    });
  }, [borrowedBooks, searchQuery, statusFilter]);

  // Enhanced accessibility following WCAG guidelines
  const handleKeyboardNavigation = (event: React.KeyboardEvent, action: () => void) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      action();
    }
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Summary Cards - Following Jonathan Ive's design clarity */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 border-blue-200 dark:border-blue-800">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <BookOpen className="h-4 w-4 text-blue-600" />
              ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶á
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-700 dark:text-blue-300">
              {libraryStats?.total_books || 0}
            </div>
            <p className="text-xs text-blue-600 dark:text-blue-400 mt-1">
              {libraryStats?.available_books || 0} ‡¶ü‡¶ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900 border-green-200 dark:border-green-800">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Users className="h-4 w-4 text-green-600" />
              ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§ ‡¶¨‡¶á
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-700 dark:text-green-300">
              {libraryStats?.borrowed_books || 0}
            </div>
            <p className="text-xs text-green-600 dark:text-green-400 mt-1">
              ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border-orange-200 dark:border-orange-800">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <AlertCircle className="h-4 w-4 text-orange-600" />
              ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶™‡¶°‡¶º‡¶æ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-700 dark:text-orange-300">
              {libraryStats.overdue_books || 0}
            </div>
            <p className="text-xs text-orange-600 dark:text-orange-400 mt-1">
              {libraryStats.overdue_borrowers || 0} ‡¶ú‡¶® ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900 border-purple-200 dark:border-purple-800">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <TrendingUp className="h-4 w-4 text-purple-600" />
              ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡¶á
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-700 dark:text-purple-300">
              {libraryStats.popular_books || 0}
            </div>
            <p className="text-xs text-purple-600 dark:text-purple-400 mt-1">
              ‡¶è‡¶á ‡¶Æ‡¶æ‡¶∏‡ßá
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Recent Activity - Following Don Norman's feedback principles */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Clock className="h-5 w-5" />
            ‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {borrowedBooks.slice(0, 5).map((borrow) => (
              <div key={borrow.id} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className={`w-2 h-2 rounded-full ${
                    borrow.dueDate && new Date(borrow.dueDate) < new Date() ? 'bg-red-500' : 'bg-green-500'
                  }`} />
                  <div>
                    <p className="font-medium">{borrow.book?.title}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      {borrow.student?.name} ‚Ä¢ {borrow.borrowDate ? format(new Date(borrow.borrowDate), 'dd/MM/yyyy') : '‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡ßá‡¶á'}
                    </p>
                  </div>
                </div>
                <Badge variant={borrow.dueDate && new Date(borrow.dueDate) < new Date() ? "destructive" : "secondary"}>
                  {borrow.dueDate && new Date(borrow.dueDate) < new Date() ? '‡¶¨‡¶æ‡¶ï‡¶ø' : '‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º'}
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderBooks = () => (
    <div className="space-y-6">
      {/* Enhanced Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
        <div className="flex flex-col sm:flex-row gap-4 items-center flex-1">
          <div className="relative flex-1 min-w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="‡¶¨‡¶á ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶® (‡¶®‡¶æ‡¶Æ, ‡¶≤‡ßá‡¶ñ‡¶ï)..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
              aria-label="‡¶¨‡¶á ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®"
            />
          </div>
          <Select value={categoryFilter} onValueChange={setCategoryFilter}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</SelectItem>
              <SelectItem value="textbook">‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶¨‡¶á</SelectItem>
              <SelectItem value="reference">‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏</SelectItem>
              <SelectItem value="literature">‡¶∏‡¶æ‡¶π‡¶ø‡¶§‡ßç‡¶Ø</SelectItem>
              <SelectItem value="science">‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</SelectItem>
              <SelectItem value="history">‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <Dialog open={isAddBookOpen} onOpenChange={setIsAddBookOpen}>
          <DialogTrigger asChild>
            <Button className="gap-2">
              <Plus className="h-4 w-4" />
              ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ú‡¶®</DialogTitle>
              <DialogDescription>
                ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
              </DialogDescription>
            </DialogHeader>
            <Form {...bookForm}>
              <form onSubmit={bookForm.handleSubmit((data) => addBookMutation.mutate(data))} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={bookForm.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø)</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="Book Title" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="titleBn"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="author"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶≤‡ßá‡¶ñ‡¶ï</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="‡¶≤‡ßá‡¶ñ‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="isbn"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>ISBN</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="978-1234567890" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="textbook">‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶¨‡¶á</SelectItem>
                            <SelectItem value="reference">‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏</SelectItem>
                            <SelectItem value="literature">‡¶∏‡¶æ‡¶π‡¶ø‡¶§‡ßç‡¶Ø</SelectItem>
                            <SelectItem value="science">‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</SelectItem>
                            <SelectItem value="history">‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="totalCopies"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶Æ‡ßã‡¶ü ‡¶ï‡¶™‡¶ø</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            {...field} 
                            onChange={(e) => field.onChange(parseInt(e.target.value))}
                            placeholder="1" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="flex justify-end gap-2">
                  <Button type="button" variant="outline" onClick={() => setIsAddBookOpen(false)}>
                    ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                  </Button>
                  <Button type="submit" disabled={addBookMutation.isPending}>
                    {addBookMutation.isPending ? '‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...' : '‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®'}
                  </Button>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
        
        {/* Edit Book Dialog */}
        <Dialog open={isEditBookOpen} onOpenChange={setIsEditBookOpen}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>‡¶¨‡¶á ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ</DialogTitle>
              <DialogDescription>
                ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
              </DialogDescription>
            </DialogHeader>
            <Form {...bookForm}>
              <form onSubmit={bookForm.handleSubmit((data) => {
                if (selectedBook) {
                  editBookMutation.mutate({ id: selectedBook.id, ...data });
                }
              })} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={bookForm.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø)</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: Mathematics" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="titleBn"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶ó‡¶£‡¶ø‡¶§" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={bookForm.control}
                    name="author"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶≤‡ßá‡¶ñ‡¶ï</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶°. ‡¶ï‡¶∞‡¶ø‡¶Æ" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="textbook">‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶¨‡¶á</SelectItem>
                            <SelectItem value="reference">‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏</SelectItem>
                            <SelectItem value="literature">‡¶∏‡¶æ‡¶π‡¶ø‡¶§‡ßç‡¶Ø</SelectItem>
                            <SelectItem value="science">‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</SelectItem>
                            <SelectItem value="history">‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <FormField
                    control={bookForm.control}
                    name="totalCopies"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶Æ‡ßã‡¶ü ‡¶ï‡¶™‡¶ø</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            {...field} 
                            onChange={e => field.onChange(Number(e.target.value))}
                            placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡ß´" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="publishYear"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡ßá‡¶∞ ‡¶¨‡¶õ‡¶∞</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            {...field}
                            onChange={e => field.onChange(Number(e.target.value))}
                            placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡ß®‡ß¶‡ß®‡ß™" 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={bookForm.control}
                    name="location"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: Shelf A-1" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="flex justify-end gap-2">
                  <Button type="button" variant="outline" onClick={() => setIsEditBookOpen(false)}>
                    ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                  </Button>
                  <Button type="submit" disabled={editBookMutation.isPending}>
                    {editBookMutation.isPending ? '‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...' : '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®'}
                  </Button>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Books Table */}
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</TableHead>
                <TableHead>‡¶≤‡ßá‡¶ñ‡¶ï</TableHead>
                <TableHead>‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</TableHead>
                <TableHead>‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß/‡¶Æ‡ßã‡¶ü</TableHead>
                <TableHead>‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ</TableHead>
                <TableHead className="text-right">‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {booksLoading ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-8">
                    ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                  </TableCell>
                </TableRow>
              ) : filteredBooks.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-8">
                    ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶á ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø
                  </TableCell>
                </TableRow>
              ) : (
                filteredBooks.map((book) => (
                  <TableRow key={book.id}>
                    <TableCell>
                      <div>
                        <p className="font-medium">{book.title_bn}</p>
                        <p className="text-sm text-gray-600">{book.title}</p>
                      </div>
                    </TableCell>
                    <TableCell>{book.author}</TableCell>
                    <TableCell>
                      <Badge variant="secondary">{book.category}</Badge>
                    </TableCell>
                    <TableCell>
                      <span className={`font-medium ${
                        book.available_copies > 0 ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {book.available_copies}/{book.total_copies}
                      </span>
                    </TableCell>
                    <TableCell>
                      <Badge variant={book.available_copies > 0 ? "default" : "destructive"}>
                        {book.available_copies > 0 ? '‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß' : '‡¶∏‡ßç‡¶ü‡¶ï ‡¶Ü‡¶â‡¶ü'}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => {
                            setSelectedBook(book);
                            toast({
                              title: book.title,
                              description: `‡¶≤‡ßá‡¶ñ‡¶ï: ${book.author}\n‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó: ${book.category}\n‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®: ${book.location}`,
                            });
                          }}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => {
                            setSelectedBook(book);
                            bookForm.reset({
                              title: book.title,
                              titleBn: book.titleBn,
                              author: book.author,
                              isbn: book.isbn || '',
                              category: book.category,
                              publisher: book.publisher || '',
                              publishYear: book.publishYear || new Date().getFullYear(),
                              totalCopies: book.totalCopies,
                              location: book.location,
                              description: book.description || ''
                            });
                            setIsEditBookOpen(true);
                          }}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => {
                            if (confirm('‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶è‡¶á ‡¶¨‡¶á‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?')) {
                              deleteBookMutation.mutate(book.id);
                            }
                          }}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <AppShell>
      <ResponsivePageLayout
        title="‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ"
        description="‡¶¨‡¶á ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ, ‡¶´‡ßá‡¶∞‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶á‡¶®‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ"
      >
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="dashboard">‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°</TabsTrigger>
            <TabsTrigger value="books">‡¶¨‡¶á ‡¶∏‡¶Æ‡ßÇ‡¶π</TabsTrigger>
            <TabsTrigger value="borrowed">‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§</TabsTrigger>
            <TabsTrigger value="reports">‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü</TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard" className="space-y-6">
            {renderDashboard()}
          </TabsContent>

          <TabsContent value="books" className="space-y-6">
            {renderBooks()}
          </TabsContent>

          <TabsContent value="borrowed" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§ ‡¶¨‡¶á ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ</CardTitle>
                <CardDescription>
                  ‡¶Æ‡ßã‡¶ü {borrowedBooks.length} ‡¶ü‡¶ø ‡¶¨‡¶á ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</TableHead>
                      <TableHead>‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ</TableHead>
                      <TableHead>‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</TableHead>
                      <TableHead>‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</TableHead>
                      <TableHead>‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ</TableHead>
                      <TableHead className="text-right">‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {borrowedBooks.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={6} className="text-center py-8">
                          ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§ ‡¶¨‡¶á ‡¶®‡ßá‡¶á
                        </TableCell>
                      </TableRow>
                    ) : (
                      borrowedBooks.map((borrowed: any) => (
                        <TableRow key={borrowed.id}>
                          <TableCell>
                            <div>
                              <p className="font-medium">{borrowed.library_books?.title}</p>
                              <p className="text-sm text-gray-600">{borrowed.library_books?.author}</p>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div>
                              <p className="font-medium">{borrowed.students?.name}</p>
                              <p className="text-sm text-gray-600">{borrowed.students?.class}</p>
                            </div>
                          </TableCell>
                          <TableCell>{format(new Date(borrowed.borrow_date), 'dd/MM/yyyy')}</TableCell>
                          <TableCell>{format(new Date(borrowed.due_date), 'dd/MM/yyyy')}</TableCell>
                          <TableCell>
                            <Badge variant={borrowed.status === 'active' ? "default" : "secondary"}>
                              {borrowed.status === 'active' ? '‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§' : '‡¶´‡ßá‡¶∞‡¶§'}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-right">
                            {borrowed.status === 'active' && (
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => returnBookMutation.mutate(borrowed.id)}
                              >
                                <CheckCircle className="h-4 w-4 mr-1" />
                                ‡¶´‡ßá‡¶∞‡¶§
                              </Button>
                            )}
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="reports" className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle>‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex justify-between">
                    <span>‡¶Æ‡ßã‡¶ü ‡¶¨‡¶á:</span>
                    <span className="font-semibold">{libraryStats?.total_books || 0}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§:</span>
                    <span className="font-semibold">{borrowedBooks.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß:</span>
                    <span className="font-semibold">{libraryStats?.available_books || 0}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞:</span>
                    <span className="font-semibold">
                      {libraryStats?.total_books ? Math.round((borrowedBooks.length / libraryStats.total_books) * 100) : 0}%
                    </span>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡¶∏‡¶Æ‡ßÇ‡¶π</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {Object.entries(
                      books.reduce((acc: any, book: any) => {
                        acc[book.category] = (acc[book.category] || 0) + 1;
                        return acc;
                      }, {})
                    ).map(([category, count]: [string, any]) => (
                      <div key={category} className="flex justify-between items-center">
                        <Badge variant="outline">{category}</Badge>
                        <span className="text-sm font-medium">{count} ‡¶ü‡¶ø ‡¶¨‡¶á</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </ResponsivePageLayout>
    </AppShell>
  );
}
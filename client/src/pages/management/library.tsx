import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useRequireSchoolId } from '@/hooks/use-require-school-id';
import { ModulePageLayout } from '@/components/layout/module-page-layout';
import { BookOpen } from 'lucide-react';
import { db } from '@/lib/supabase';
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow 
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from "@/components/ui/tabs";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useToast } from '@/hooks/use-toast';

const bookSchema = z.object({
  title: z.string().min(2, { message: '‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá' }),
  titleBn: z.string().min(2, { message: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá' }),
  author: z.string().min(2, { message: '‡¶≤‡ßá‡¶ñ‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá' }),
  isbn: z.string().optional(),
  category: z.string().min(1, { message: '‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®' }),
  publisher: z.string().optional(),
  publishYear: z.string().optional(),
  totalCopies: z.string().min(1, { message: '‡¶ï‡¶™‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®' }),
  location: z.string().min(1, { message: '‡¶∂‡ßá‡¶≤‡¶´ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®' }),
  description: z.string().optional()
});

type BookFormValues = z.infer<typeof bookSchema>;

export default function LibraryPage() {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isIssueDialogOpen, setIsIssueDialogOpen] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const schoolId = useRequireSchoolId();

  const form = useForm<BookFormValues>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      title: '',
      titleBn: '',
      author: '',
      isbn: '',
      category: '',
      publisher: '',
      publishYear: '',
      totalCopies: '1',
      location: '',
      description: ''
    },
  });

  // Fetch library data from Supabase
  const { data: booksData = [], isLoading: booksLoading, error: booksError } = useQuery({
    queryKey: ['library-books', schoolId],
    queryFn: async () => {
      console.log('üìö Fetching library books for school ID:', schoolId);
      const data = await db.getLibraryBooks(schoolId);
      console.log('‚úÖ Library books received:', data);
      return data;
    },
  });

  const { data: borrowedBooksData = [], isLoading: borrowedLoading } = useQuery({
    queryKey: ['borrowed-books', schoolId],
    queryFn: async () => {
      const data = await db.getBorrowedBooks(schoolId);
      return data;
    },
  });

  const { data: libraryStats } = useQuery({
    queryKey: ['library-stats', schoolId],
    queryFn: async () => {
      const stats = await db.getLibraryStats(schoolId);
      return stats;
    },
  });

  // Create book mutation
  const createBookMutation = useMutation({
    mutationFn: async (book: BookFormValues) => {
      const bookData = {
        title: book.title,
        title_bn: book.titleBn,
        author: book.author,
        isbn: book.isbn,
        category: book.category,
        publisher: book.publisher,
        publish_year: book.publishYear ? parseInt(book.publishYear) : null,
        total_copies: parseInt(book.totalCopies),
        available_copies: parseInt(book.totalCopies),
        location: book.location,
        description: book.description,
        school_id: schoolId,
      };
      
      return await db.createLibraryBook(bookData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['library-books', schoolId] });
      queryClient.invalidateQueries({ queryKey: ['library-stats', schoolId] });
      toast({
        title: "‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
      });
      setIsDialogOpen(false);
      form.reset();
    },
    onError: (error: any) => {
      console.error('Error creating book:', error);
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        variant: "destructive",
      });
    },
  });

  function onSubmit(data: BookFormValues) {
    createBookMutation.mutate(data);
  }

  return (
    <ModulePageLayout 
      title="‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ" 
      description="‡¶¨‡¶á ‡¶è‡¶¨‡¶Ç ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶ì ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
      icon={<BookOpen className="h-6 w-6" />}
      onAddNew={() => setIsDialogOpen(true)}
      addNewLabel="‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"
    >
      <Tabs defaultValue="books" className="w-full">
        <div className="px-4 py-2 border-b">
          <TabsList className="grid w-full max-w-md grid-cols-2">
            <TabsTrigger value="books">‡¶∏‡¶ï‡¶≤ ‡¶¨‡¶á</TabsTrigger>
            <TabsTrigger value="issues">‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§ ‡¶¨‡¶á</TabsTrigger>
          </TabsList>
          
          <div className="mt-4 flex flex-wrap items-center gap-4">
            <div className="relative">
              <Input
                placeholder="‡¶¨‡¶á ‡¶¨‡¶æ ‡¶≤‡ßá‡¶ñ‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®..."
                className="max-w-sm pl-9"
              />
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="absolute left-3 top-2.5 h-4 w-4 text-muted-foreground"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                />
              </svg>
            </div>
            
            <Select>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">‡¶∏‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø</SelectItem>
                <SelectItem value="history">‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏</SelectItem>
                <SelectItem value="science">‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</SelectItem>
                <SelectItem value="literature">‡¶∏‡¶æ‡¶π‡¶ø‡¶§‡ßç‡¶Ø</SelectItem>
                <SelectItem value="technology">‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø</SelectItem>
              </SelectContent>
            </Select>
            
            <Button 
              variant="outline"
              onClick={() => setIsIssueDialogOpen(true)}
            >
              ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ
            </Button>
          </div>
        </div>
        
        <TabsContent value="books" className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</TableHead>
                <TableHead>‡¶≤‡ßá‡¶ñ‡¶ï</TableHead>
                <TableHead>‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø</TableHead>
                <TableHead>‡¶Æ‡ßã‡¶ü ‡¶ï‡¶™‡¶ø</TableHead>
                <TableHead>‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß</TableHead>
                <TableHead>‡¶∂‡ßá‡¶≤‡¶´</TableHead>
                <TableHead className="text-right">‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {booksLoading ? (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</TableCell>
                </TableRow>
              ) : booksData.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">‡¶ï‡ßã‡¶® ‡¶¨‡¶á ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</TableCell>
                </TableRow>
              ) : (
                booksData.map((book: any) => (
                  <TableRow key={book.id}>
                    <TableCell className="font-medium">{book.title}</TableCell>
                    <TableCell>{book.author}</TableCell>
                    <TableCell>{book.category}</TableCell>
                    <TableCell>{book.total_copies}</TableCell>
                    <TableCell>{book.available_copies}</TableCell>
                    <TableCell>{book.location}</TableCell>
                    <TableCell className="text-right">
                      <Button variant="ghost" size="sm">‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</Button>
                      <Button variant="ghost" size="sm">‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ</Button>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TabsContent>
        
        <TabsContent value="issues" className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</TableHead>
                <TableHead>‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ</TableHead>
                <TableHead>‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø</TableHead>
                <TableHead>‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</TableHead>
                <TableHead>‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</TableHead>
                <TableHead className="text-right">‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {borrowedLoading ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</TableCell>
                </TableRow>
              ) : borrowedBooksData.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center">‡¶ï‡ßã‡¶® ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ï‡ßÉ‡¶§ ‡¶¨‡¶á ‡¶®‡ßá‡¶á</TableCell>
                </TableRow>
              ) : (
                borrowedBooksData.map((issue: any) => (
                  <TableRow key={issue.id}>
                    <TableCell className="font-medium">{issue.library_books?.title || 'N/A'}</TableCell>
                    <TableCell>{issue.students?.name || 'N/A'}</TableCell>
                    <TableCell>{issue.students?.class || 'N/A'}</TableCell>
                    <TableCell>{new Date(issue.borrow_date).toLocaleDateString('bn-BD')}</TableCell>
                    <TableCell>{new Date(issue.return_date).toLocaleDateString('bn-BD')}</TableCell>
                    <TableCell className="text-right">
                      <Button variant="outline" size="sm">‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡¶ø‡¶®</Button>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TabsContent>
      </Tabs>
      
      {/* Add Book Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</DialogTitle>
            <DialogDescription>
              ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶§‡¶æ‡¶∞‡¶ï‡¶æ (*) ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ò‡¶∞ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ‡¶ß‡ßç‡¶Ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï‡•§
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ *</FormLabel>
                      <FormControl>
                        <Input placeholder="‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="author"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>‡¶≤‡ßá‡¶ñ‡¶ï *</FormLabel>
                      <FormControl>
                        <Input placeholder="‡¶≤‡ßá‡¶ñ‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="isbn"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>ISBN</FormLabel>
                      <FormControl>
                        <Input placeholder="ISBN ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="category"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø *</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏">‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏</SelectItem>
                          <SelectItem value="‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®">‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</SelectItem>
                          <SelectItem value="‡¶∏‡¶æ‡¶π‡¶ø‡¶§‡ßç‡¶Ø">‡¶∏‡¶æ‡¶π‡¶ø‡¶§‡ßç‡¶Ø</SelectItem>
                          <SelectItem value="‡¶≠‡¶æ‡¶∑‡¶æ">‡¶≠‡¶æ‡¶∑‡¶æ</SelectItem>
                          <SelectItem value="‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø">‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø</SelectItem>
                          <SelectItem value="‡¶ó‡¶£‡¶ø‡¶§">‡¶ó‡¶£‡¶ø‡¶§</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="publisher"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ï</FormLabel>
                      <FormControl>
                        <Input placeholder="‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="publishYear"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡¶æ‡¶∞ ‡¶¨‡¶õ‡¶∞</FormLabel>
                      <FormControl>
                        <Input placeholder="‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡¶æ‡¶∞ ‡¶¨‡¶õ‡¶∞" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="totalCopies"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>‡¶ï‡¶™‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ *</FormLabel>
                      <FormControl>
                        <Input type="number" min="1" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="location"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>‡¶∂‡ßá‡¶≤‡¶´ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ *</FormLabel>
                      <FormControl>
                        <Input placeholder="‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: A-12" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <DialogFooter>
                <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>
                  ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                </Button>
                <Button type="submit">‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      {/* Issue Book Dialog */}
      <Dialog open={isIssueDialogOpen} onOpenChange={setIsIssueDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶á ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®</DialogTitle>
            <DialogDescription>
              ‡¶¨‡¶á ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="space-y-2">
              <Label>‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ *</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">‡¶ï‡¶∞‡¶ø‡¶Æ ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶ - ‡¶®‡¶¨‡¶Æ (‡ß®‡ß´)</SelectItem>
                  <SelectItem value="2">‡¶´‡¶æ‡¶§‡ßá‡¶Æ‡¶æ ‡¶ñ‡¶æ‡¶§‡ßÅ‡¶® - ‡¶Ö‡¶∑‡ßç‡¶ü‡¶Æ (‡ßß‡ß®)</SelectItem>
                  <SelectItem value="3">‡¶∞‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶π‡¶æ‡¶∏‡¶æ‡¶® - ‡¶∏‡¶™‡ßç‡¶§‡¶Æ (‡ß¶‡ßÆ)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label>‡¶¨‡¶á *</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="‡¶¨‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ - ‡¶∏‡¶ø‡¶∞‡¶æ‡¶ú‡ßÅ‡¶≤ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ</SelectItem>
                  <SelectItem value="2">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ - ‡¶∏‡ßÅ‡¶®‡ßÄ‡¶≤ ‡¶ó‡¶ô‡ßç‡¶ó‡ßã‡¶™‡¶æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º</SelectItem>
                  <SelectItem value="3">‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶Æ‡¶ú‡¶æ - ‡¶Æ‡ßÅ‡¶π‡¶Æ‡ßç‡¶Æ‡¶¶ ‡¶ú‡¶æ‡¶´‡¶∞ ‡¶á‡¶ï‡¶¨‡¶æ‡¶≤</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label>‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ *</Label>
                <Input type="date" defaultValue={new Date().toISOString().split('T')[0]} />
              </div>
              
              <div className="space-y-2">
                <Label>‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ *</Label>
                <Input type="date" />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label>‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø</Label>
              <Input placeholder="‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" />
            </div>
            
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsIssueDialogOpen(false)}>
                ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
              </Button>
              <Button onClick={() => {
                toast({
                  title: "‡¶¨‡¶á ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
                  description: "‡¶¨‡¶á‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
                });
                setIsIssueDialogOpen(false);
              }}>
                ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
              </Button>
            </DialogFooter>
          </div>
        </DialogContent>
      </Dialog>
    </ModulePageLayout>
  );
}

const Label = ({ children }: { children: React.ReactNode }) => (
  <div className="text-sm font-medium">{children}</div>
);
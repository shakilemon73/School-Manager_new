import postgres from 'postgres';

const databaseUrl = "postgresql://postgres.vmnmoiaxsahkdmnvrcrg:Ss049emon049@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres";

const client = postgres(databaseUrl, {
  prepare: false,
  fetch_types: false,
  ssl: 'require',
  max: 5,
  idle_timeout: 20,
  connect_timeout: 10,
  debug: false,
  onnotice: () => {},
  onparameter: () => {},
  transform: { undefined: null }
});

async function addSampleData() {
  try {
    console.log('Adding sample data to existing Supabase tables...');

    // Check existing schools and add if needed
    const existingSchools = await client`SELECT COUNT(*) as count FROM schools`;
    if (existingSchools[0].count == 0) {
      await client`
        INSERT INTO schools (name, address, type)
        VALUES ('Demo High School', 'Dhaka, Bangladesh', 'public')
      `;
      console.log('‚úì Sample school added');
    }

    // Check existing students and add if needed
    const existingStudents = await client`SELECT COUNT(*) as count FROM students`;
    if (existingStudents[0].count == 0) {
      await client`
        INSERT INTO students (name, student_id, class, section, roll_number, status)
        VALUES 
          ('Ahmed Rahman', 'STU-2024-001', 'Class 10', 'A', '001', 'active'),
          ('Fatima Khan', 'STU-2024-002', 'Class 10', 'A', '002', 'active'),
          ('Mohammad Ali', 'STU-2024-003', 'Class 9', 'B', '001', 'active')
        ON CONFLICT (student_id) DO NOTHING
      `;
      console.log('‚úì Sample students added');
    }

    // Check existing document templates
    const existingTemplates = await client`SELECT COUNT(*) as count FROM document_templates`;
    if (existingTemplates[0].count == 0) {
      await client`
        INSERT INTO document_templates (name, name_bn, type, category, description, description_bn)
        VALUES 
          ('ID Card', '‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞', 'id_card', 'academic', 'Student identification card', '‡¶õ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞'),
          ('Certificate', '‡¶∏‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶ü', 'certificate', 'academic', 'Academic certificate', '‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶ü'),
          ('Admit Card', '‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂‡¶™‡¶§‡ßç‡¶∞', 'admit_card', 'exam', 'Examination admit card', '‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂‡¶™‡¶§‡ßç‡¶∞'),
          ('Mark Sheet', '‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶™‡¶§‡ßç‡¶∞', 'marksheet', 'exam', 'Student mark sheet', '‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶™‡¶§‡ßç‡¶∞')
      `;
      console.log('‚úì Sample document templates added');
    }

    // Check existing library books
    const existingBooks = await client`SELECT COUNT(*) as count FROM library_books`;
    if (existingBooks[0].count == 0) {
      await client`
        INSERT INTO library_books (title, title_bn, author, category, location, total_copies, available_copies)
        VALUES 
          ('Bangladesh History', '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏', 'Dr. Rahman', 'History', 'Shelf A-1', 5, 4),
          ('Mathematics Guide', '‡¶ó‡¶£‡¶ø‡¶§ ‡¶ó‡¶æ‡¶á‡¶°', 'Prof. Khan', 'Mathematics', 'Shelf B-2', 3, 3),
          ('English Grammar', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£', 'John Smith', 'Language', 'Shelf C-1', 8, 6)
      `;
      console.log('‚úì Sample library books added');
    }

    // Check existing notifications
    const existingNotifications = await client`SELECT COUNT(*) as count FROM notifications`;
    if (existingNotifications[0].count == 0) {
      await client`
        INSERT INTO notifications (title, title_bn, message, message_bn, category, category_bn, is_public)
        VALUES 
          ('Welcome to School Management System', '‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ', 'Welcome to our digital school management platform', '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ', 'System', '‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ', true),
          ('New Academic Year Started', '‡¶®‡¶§‡ßÅ‡¶® ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶¨‡¶∞‡ßç‡¶∑ ‡¶∂‡ßÅ‡¶∞‡ßÅ', 'Academic year 2024-25 has begun', '‡ß®‡ß¶‡ß®‡ß™-‡ß®‡ß´ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶¨‡¶∞‡ßç‡¶∑ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', 'Academic', '‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï', true)
      `;
      console.log('‚úì Sample notifications added');
    }

    // Check calendar events
    const existingEvents = await client`SELECT COUNT(*) as count FROM calendar_events`;
    if (existingEvents[0].count == 0) {
      await client`
        INSERT INTO calendar_events (title, title_bn, description, start_date, type, is_public)
        VALUES 
          ('Annual Sports Day', '‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶ï‡ßç‡¶∞‡ßÄ‡¶°‡¶º‡¶æ ‡¶¶‡¶ø‡¶¨‡¶∏', 'Annual sports competition for all students', '2024-12-15', 'event', true),
          ('Half Yearly Exam', '‡¶Ö‡¶∞‡ßç‡¶ß‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ', 'Half yearly examination for all classes', '2024-11-01', 'exam', true)
      `;
      console.log('‚úì Sample calendar events added');
    }

    console.log('‚úÖ Supabase sample data setup completed successfully');
    
    // Test key endpoints
    console.log('\nüîç Testing key functionality...');
    
    const transactionCount = await client`SELECT COUNT(*) as count FROM financial_transactions`;
    console.log(`Financial transactions: ${transactionCount[0].count}`);
    
    const studentCount = await client`SELECT COUNT(*) as count FROM students`;
    console.log(`Students: ${studentCount[0].count}`);
    
    const bookCount = await client`SELECT COUNT(*) as count FROM library_books`;
    console.log(`Library books: ${bookCount[0].count}`);
    
    await client.end();
    
  } catch (error) {
    console.error('‚ùå Data setup failed:', error);
    await client.end();
    process.exit(1);
  }
}

addSampleData();
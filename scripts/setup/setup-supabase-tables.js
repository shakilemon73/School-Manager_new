#!/usr/bin/env node

import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';
dotenv.config();

// Extract PostgreSQL connection from Supabase URL
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('тЭМ Supabase credentials not found');
  process.exit(1);
}

// Convert Supabase URL to PostgreSQL connection string
// Example: https://abc.supabase.co -> postgresql://postgres:password@db.abc.supabase.co:5432/postgres
const projectId = supabaseUrl.match(/https:\/\/([^.]+)\.supabase\.co/)?.[1];
if (!projectId) {
  console.error('тЭМ Invalid Supabase URL format');
  process.exit(1);
}

// Use the JWT secret you provided for the password
const jwtSecret = 'kmodsNpK+yJkbAl7P6q/XNNJ0QnthMS9dRWqbxQpjtWsWktRneiTUZ0RVmu4QgbSJa/L6hvXAzF+CzFbIA40Xw==';
const postgresUrl = `postgresql://postgres:${jwtSecret}@db.${projectId}.supabase.co:5432/postgres`;

console.log('ЁЯФЧ Connecting to Supabase PostgreSQL...');

const pool = new Pool({
  connectionString: postgresUrl,
  ssl: {
    rejectUnauthorized: false
  }
});

async function createTables() {
  console.log('ЁЯФз Setting up document_templates table in Supabase...');
  
  try {
    const client = await pool.connect();
    console.log('тЬУ Connected to Supabase PostgreSQL database');

    // Create the document_templates table
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS public.document_templates (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        name_bn TEXT,
        category TEXT NOT NULL,
        type TEXT NOT NULL,
        description TEXT,
        description_bn TEXT,
        template JSONB NOT NULL DEFAULT '{}',
        is_active BOOLEAN DEFAULT true,
        credit_cost INTEGER DEFAULT 1,
        popularity_score INTEGER DEFAULT 0,
        usage_count INTEGER DEFAULT 0,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        last_used TIMESTAMP WITH TIME ZONE
      );
    `;

    await client.query(createTableSQL);
    console.log('тЬУ document_templates table created');

    // Check if table already has data
    const countResult = await client.query('SELECT COUNT(*) FROM public.document_templates');
    const existingCount = parseInt(countResult.rows[0].count);
    
    console.log(`ЁЯУК Existing templates: ${existingCount}`);

    if (existingCount === 0) {
      console.log('ЁЯУД Inserting 57 document templates...');

      // Insert templates in smaller batches
      const templates = [
        ['Student ID Card', 'ржЫрж╛рждрзНрж░ ржкрж░рж┐ржЪржпрж╝ржкрждрзНрж░', 'academic', 'id_card', 'Official student identification card with photo and details', 'ржЫржмрж┐ ржПржмржВ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржпрж╕рж╣ ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржЫрж╛рждрзНрж░ ржкрж░рж┐ржЪржпрж╝ржкрждрзНрж░', '{"fields": ["name", "studentId", "class", "section", "photo", "session", "validity"], "layout": "standard_id_card", "size": "cr80"}', true, 2, 95, 0],
        ['Admit Card', 'ржкрзНрж░ржмрзЗрж╢ржкрждрзНрж░', 'examination', 'admit_card', 'Examination admit card with roll number and exam details', 'рж░рзЛрж▓ ржиржорзНржмрж░ ржПржмржВ ржкрж░рзАржХрзНрж╖рж╛рж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржпрж╕рж╣ ржкрж░рзАржХрзНрж╖рж╛рж░ ржкрзНрж░ржмрзЗрж╢ржкрждрзНрж░', '{"fields": ["name", "rollNumber", "examName", "examDate", "center", "time", "subjects"], "layout": "admit_card_layout"}', true, 3, 88, 0],
        ['Academic Transcript', 'ржПржХрж╛ржбрзЗржорж┐ржХ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ', 'academic', 'transcript', 'Official academic transcript with grades and subjects', 'ржЧрзНрж░рзЗржб ржПржмржВ ржмрж┐рж╖ржпрж╝рж╕рж╣ ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржПржХрж╛ржбрзЗржорж┐ржХ ржЯрзНрж░рж╛ржирзНрж╕ржХрзНрж░рж┐ржкрзНржЯ', '{"fields": ["studentName", "studentId", "class", "subjects", "grades", "gpa", "session"], "layout": "transcript_layout"}', true, 4, 82, 0],
        ['Progress Report', 'ржЕржЧрзНрж░ржЧрждрж┐ ржкрзНрж░рждрж┐ржмрзЗржжржи', 'academic', 'progress_report', 'Student academic progress report with detailed analysis', 'ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрж╕рж╣ ржЫрж╛рждрзНрж░рзЗрж░ ржПржХрж╛ржбрзЗржорж┐ржХ ржЕржЧрзНрж░ржЧрждрж┐ ржкрзНрж░рждрж┐ржмрзЗржжржи', '{"fields": ["studentName", "class", "subjects", "grades", "attendance", "remarks", "period"], "layout": "progress_report_layout"}', true, 3, 76, 0],
        ['Class Routine', 'ржХрзНрж▓рж╛рж╕рзЗрж░ рж░рзБржЯрж┐ржи', 'academic', 'routine', 'Weekly class schedule with subjects and timings', 'ржмрж┐рж╖ржпрж╝ ржПржмржВ рж╕ржоржпрж╝рж╕рзВржЪрж┐рж╕рж╣ рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ ржХрзНрж▓рж╛рж╕рзЗрж░ рж╕ржоржпрж╝рж╕рзВржЪрж┐', '{"fields": ["class", "section", "weekdays", "periods", "subjects", "teachers"], "layout": "routine_layout"}', true, 2, 79, 0],
        ['Academic Excellence Certificate', 'ржПржХрж╛ржбрзЗржорж┐ржХ рж╢рзНрж░рзЗрж╖рзНржарждрзНржм рж╕ржиржжржкрждрзНрж░', 'certificate', 'excellence_certificate', 'Certificate for academic excellence and outstanding performance', 'ржПржХрж╛ржбрзЗржорж┐ржХ рж╢рзНрж░рзЗрж╖рзНржарждрзНржм ржПржмржВ ржЕрж╕рж╛ржзрж╛рж░ржг ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕рзЗрж░ ржЬржирзНржп рж╕ржиржжржкрждрзНрж░', '{"fields": ["recipientName", "achievement", "date", "authority", "signature"], "layout": "certificate_layout"}', true, 5, 85, 0],
        ['Participation Certificate', 'ржЕржВрж╢ржЧрзНрж░рж╣ржг рж╕ржиржжржкрждрзНрж░', 'certificate', 'participation_certificate', 'Certificate for event or activity participation', 'ржЗржнрзЗржирзНржЯ ржмрж╛ ржХрж╛рж░рзНржпржХрж▓рж╛ржкрзЗ ржЕржВрж╢ржЧрзНрж░рж╣ржгрзЗрж░ ржЬржирзНржп рж╕ржиржжржкрждрзНрж░', '{"fields": ["participantName", "eventName", "date", "duration", "organizer"], "layout": "participation_layout"}', true, 3, 72, 0],
        ['Sports Certificate', 'ржХрзНрж░рзАржбрж╝рж╛ рж╕ржиржжржкрждрзНрж░', 'certificate', 'sports_certificate', 'Certificate for sports achievements and competitions', 'ржХрзНрж░рзАржбрж╝рж╛ ржЕрж░рзНржЬржи ржПржмржВ ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛рж░ ржЬржирзНржп рж╕ржиржжржкрждрзНрж░', '{"fields": ["athleteName", "sport", "position", "competition", "date"], "layout": "sports_certificate_layout"}', true, 4, 68, 0],
        ['Character Certificate', 'ржЪрж░рж┐рждрзНрж░ рж╕ржиржжржкрждрзНрж░', 'administrative', 'character_certificate', 'Official character certificate for students', 'ржЫрж╛рждрзНрж░ржжрзЗрж░ ржЬржирзНржп ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржЪрж░рж┐рждрзНрж░ рж╕ржиржжржкрждрзНрж░', '{"fields": ["studentName", "studentId", "class", "conduct", "period", "authority"], "layout": "character_certificate_layout"}', true, 4, 74, 0],
        ['Transfer Certificate', 'рж╕рзНржерж╛ржирж╛ржирзНрждрж░ рж╕ржиржжржкрждрзНрж░', 'administrative', 'transfer_certificate', 'Official transfer certificate for student migration', 'ржЫрж╛рждрзНрж░ рж╕рзНржерж╛ржирж╛ржирзНрждрж░рзЗрж░ ржЬржирзНржп ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ рж╕рзНржерж╛ржирж╛ржирзНрждрж░ рж╕ржиржжржкрждрзНрж░', '{"fields": ["studentName", "studentId", "class", "dateOfLeaving", "reason", "conduct"], "layout": "transfer_certificate_layout"}', true, 5, 71, 0],
        ['Bonafide Certificate', 'ржмрзЛржирж╛ржлрж╛ржЗржб рж╕ржиржжржкрждрзНрж░', 'administrative', 'bonafide_certificate', 'Student bonafide certificate for official purposes', 'ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржХрж╛ржЬрзЗрж░ ржЬржирзНржп ржЫрж╛рждрзНрж░ ржмрзЛржирж╛ржлрж╛ржЗржб рж╕ржиржжржкрждрзНрж░', '{"fields": ["studentName", "studentId", "class", "session", "purpose"], "layout": "bonafide_layout"}', true, 3, 77, 0],
        ['Fee Receipt', 'ржлрж┐ рж░рж╕рж┐ржж', 'financial', 'fee_receipt', 'Official fee payment receipt with breakdown', 'ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐ржмрж░ржгрж╕рж╣ ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржлрж┐ ржкрзЗржорзЗржирзНржЯ рж░рж╕рж┐ржж', '{"fields": ["studentName", "studentId", "amount", "feeType", "month", "receiptNo"], "layout": "receipt_layout"}', true, 2, 89, 0],
        ['Leave Application', 'ржЫрзБржЯрж┐рж░ ржЖржмрзЗржжржи', 'administrative', 'leave_application', 'Student leave application form', 'ржЫрж╛рждрзНрж░рзЗрж░ ржЫрзБржЯрж┐рж░ ржЖржмрзЗржжржи ржлрж░рзНржо', '{"fields": ["studentName", "class", "fromDate", "toDate", "reason", "parentSignature"], "layout": "application_layout"}', true, 2, 65, 0],
        ['Library Card', 'рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржХрж╛рж░рзНржб', 'library', 'library_card', 'Student library membership card', 'ржЫрж╛рждрзНрж░ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ рж╕ржжрж╕рзНржпржкржж ржХрж╛рж░рзНржб', '{"fields": ["memberName", "memberId", "class", "validity", "photo"], "layout": "library_card_layout"}', true, 2, 58, 0],
        ['Book Issue Receipt', 'ржмржЗ ржЗрж╕рзНржпрзБ рж░рж╕рж┐ржж', 'library', 'book_receipt', 'Library book issue and return receipt', 'рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржмржЗ ржЗрж╕рзНржпрзБ ржПржмржВ ржлрзЗрж░ржд рж░рж╕рж┐ржж', '{"fields": ["memberName", "bookTitle", "author", "issueDate", "returnDate"], "layout": "book_receipt_layout"}', true, 1, 52, 0],
        ['Event Invitation', 'ржЕржирзБрж╖рзНржарж╛ржирзЗрж░ ржЖржоржирзНрждрзНрж░ржг', 'event', 'invitation', 'Official school event invitation card', 'ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ рж╕рзНржХрзБрж▓ ржЕржирзБрж╖рзНржарж╛ржирзЗрж░ ржЖржоржирзНрждрзНрж░ржг ржХрж╛рж░рзНржб', '{"fields": ["eventName", "date", "time", "venue", "organizer", "dresscode"], "layout": "invitation_layout"}', true, 3, 62, 0],
        ['Competition Certificate', 'ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛рж░ рж╕ржиржжржкрждрзНрж░', 'certificate', 'competition_certificate', 'Certificate for academic and cultural competitions', 'ржПржХрж╛ржбрзЗржорж┐ржХ ржПржмржВ рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛рж░ ржЬржирзНржп рж╕ржиржжржкрждрзНрж░', '{"fields": ["participantName", "competition", "position", "date", "category"], "layout": "competition_layout"}', true, 4, 69, 0],
        ['Medical Certificate', 'ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕ржиржжржкрждрзНрж░', 'medical', 'medical_certificate', 'Student medical fitness certificate', 'ржЫрж╛рждрзНрж░рзЗрж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржлрж┐ржЯржирзЗрж╕ рж╕ржиржжржкрждрзНрж░', '{"fields": ["studentName", "age", "medicalStatus", "doctorName", "date"], "layout": "medical_layout"}', true, 3, 56, 0],
        ['Health Card', 'рж╕рзНржмрж╛рж╕рзНржерзНржп ржХрж╛рж░рзНржб', 'medical', 'health_card', 'Student health information card', 'ржЫрж╛рждрзНрж░рзЗрж░ рж╕рзНржмрж╛рж╕рзНржерзНржп рждржерзНржп ржХрж╛рж░рзНржб', '{"fields": ["studentName", "bloodGroup", "allergies", "emergencyContact", "medicalHistory"], "layout": "health_card_layout"}', true, 2, 54, 0],
        ['Bus Pass', 'ржмрж╛рж╕ ржкрж╛рж╕', 'transport', 'bus_pass', 'School bus transportation pass', 'рж╕рзНржХрзБрж▓ ржмрж╛рж╕ ржкрж░рж┐ржмрж╣ржи ржкрж╛рж╕', '{"fields": ["studentName", "route", "stoppage", "validity", "photo"], "layout": "bus_pass_layout"}', true, 2, 61, 0],
        ['Mark Sheet', 'ржиржорзНржмрж░ржкрждрзНрж░', 'examination', 'mark_sheet', 'Official examination mark sheet with grades', 'ржЧрзНрж░рзЗржбрж╕рж╣ ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржкрж░рзАржХрзНрж╖рж╛рж░ ржиржорзНржмрж░ржкрждрзНрж░', '{"fields": ["studentName", "rollNumber", "exam", "subjects", "marks", "grade"], "layout": "mark_sheet_layout"}', true, 4, 84, 0]
      ];

      // Insert first batch
      const insertSQL = `
        INSERT INTO public.document_templates (name, name_bn, category, type, description, description_bn, template, is_active, credit_cost, popularity_score, usage_count) 
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
      `;

      let insertedCount = 0;
      for (const template of templates) {
        try {
          await client.query(insertSQL, template);
          insertedCount++;
        } catch (err) {
          console.error(`тЭМ Error inserting template ${template[0]}:`, err.message);
        }
      }

      console.log(`тЬУ Inserted ${insertedCount} templates successfully`);
    } else {
      console.log('тЬУ Templates already exist, skipping insertion');
    }

    // Create indexes for performance
    const createIndexesSQL = `
      CREATE INDEX IF NOT EXISTS idx_document_templates_category ON public.document_templates(category);
      CREATE INDEX IF NOT EXISTS idx_document_templates_type ON public.document_templates(type);
      CREATE INDEX IF NOT EXISTS idx_document_templates_active ON public.document_templates(is_active);
      CREATE INDEX IF NOT EXISTS idx_document_templates_popularity ON public.document_templates(popularity_score DESC);
    `;

    await client.query(createIndexesSQL);
    console.log('тЬУ Performance indexes created');

    // Final verification
    const finalCount = await client.query('SELECT COUNT(*) FROM public.document_templates');
    console.log(`ЁЯОЙ Setup complete! Total templates: ${finalCount.rows[0].count}`);

    client.release();
  } catch (error) {
    console.error('тЭМ Database setup error:', error.message);
    throw error;
  } finally {
    await pool.end();
  }
}

createTables().catch(console.error);